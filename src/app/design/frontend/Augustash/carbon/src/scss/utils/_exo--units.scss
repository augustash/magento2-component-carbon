// ------------------------------------------------------------------------------
// Unit functions from Exo
// ------------------------------------------------------------------------------

@use 'sass:math';

$global-font-size: 100% !default;

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {String|Number} $num - Number to strip unit from.
/// @returns {Number} - The same number, sans unit.
@function strip-unit($num) {
  @return math.div($num, $num * 0 + 1);
}

/// Converts one or more pixel values into matching rem values.
///
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If this parameter is `null`, the function will reference the `$base-font-size` variable.
/// @returns {List} - A list of converted values.
@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  @if $base == null {
    $base: $global-font-size;
  }

  @if unit($base) == '%' {
    $base: math.div($base, 100%) * 16px;
  }

  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return -exo-to-rem($values, $base);
  }

  @for $i from 1 through $count { /* stylelint-disable-line at-rule-no-unknown */
    $rem-values: append($rem-values, -exo-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

/// Converts a unit-less, pixel, or rem value to em, for use in breakpoints.
///
/// @param {String|Number} $value - The value to convert
/// @returns {Number} - The value converted to ems
@function -exo-bp-to-em($value) {
  @if unit($value) == 'px' or unitless($value) {
    $value: rem-calc($value, $base: 16px);
  }

  @return strip-unit($value) * 1em;
}

/// Converts a pixel value to matching rem value. *Any* value passed,
/// regardless of unit, is assumed to be a pixel value. By default, the base pixel
/// value used to calculate the rem value is taken from the `$global-font-size`
/// variable.
///
/// @param {String|Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value.
@function -exo-to-rem($value, $base: null) {
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }

  @if unit($value) != 'rem' {
    $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
  }

  @if $value == 0rem { /* stylelint-disable-line length-zero-no-unit */
    $value: 0;
  }

  @return $value;
}

/// Casts a map into a list.
/// @link http://hugogiraudel.com/2014/04/28/casting-map-into-list/
///
/// @param {Map} $map - Map to pull a value from.
///
/// @returns {List} Depending on the flag, returns either $keys or $values or both.
@function map-to-list($map, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($map) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $map {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    }
    @else if $keep == 'values' {
      @return $values;
    }
    @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($map) != 'list', ($value,), $map);
}
